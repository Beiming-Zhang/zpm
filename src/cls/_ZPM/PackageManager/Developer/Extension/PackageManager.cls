Include %ZPM.PackageManager.Common

/// Overlay %Studio.SourceControl.ISC with this extension's capabilities by running:
/// <code>
/// Write ##class(%Studio.SourceControl.Interface).SourceControlClassSet("%ZPM.PackageManager.Developer.Extension.Composite")
/// Write ##class(%ZPM.PackageManager.Developer.Extension.Composite).SetExtensionClasses("%ZPM.PackageManager.Developer.Extension.SourceControl.ISC",$ListBuild("%ZPM.PackageManager.Developer.Extension.PackageManager"))
/// </code>
Class %ZPM.PackageManager.Developer.Extension.PackageManager Extends (%Studio.Extension.Base, %ZPM.PackageManager.Developer.Extension.Constants)
{

/// TODO: Change to module-specific domain (and ensure proper global mappings configured)
Parameter DOMAIN = "ZPM";

/// Stores an array of document names for which a warning has already been issued in GetStatus.
/// Used to avoid repetitive/duplicate notifications in the console log/output window.
/// This will not work for Atelier over (stateless) REST APIs, but Atelier's different client behavior
/// will have a similar effect (because it calls GetStatus very infrequently compared to Studio).
Property SnapshotMessageWarned [ MultiDimensional ];

XData Menu
{
<MenuBase>
<Menu Name="%PackageMain" Type="0">
<MenuItem Name="%OpenModule" Save="100" />
</Menu>
<Menu Name="%PackageContext" Type="1">
<MenuItem Name="%OpenModule" Save="100" />
</Menu>
</MenuBase>
}

Method GetModuleForInternalName(InternalName As %String, Output pIsModule As %Boolean = 0, Output pInModule As %Boolean = 0, Output pExplicitlyListed As %Boolean = 0) As %ZPM.PackageManager.Developer.Module [ Private ]
{
	Set tModule = $$$NULLOREF
	Set tExt = $ZCVT($Piece(InternalName,".",*),"U")
	Set pIsModule = (tExt = "ZPM")
	If pIsModule {
		If ##class(%ZPM.PackageManager.Developer.Module).NameExists($Piece(InternalName,".",1,*-1)) {
			Set tModule = ##class(%ZPM.PackageManager.Developer.Module).NameOpen($Piece(InternalName,".",1,*-1),,.tSC)
			$$$ThrowOnError(tSC)
		}
	} Else {
		Set tModule = ##class(%ZPM.PackageManager.Developer.Extension.Utils).FindHomeModule(InternalName)
		If $IsObject(tModule) {
			Set pInModule = 1
			Set pExplicitlyListed = ##class(%ZPM.PackageManager.Developer.ResourceReference).ResourceNameExists(InternalName)
		}
	}
	Quit tModule
}

Method OnMenuItem(MenuName As %String, InternalName As %String, SelectedText As %String, ByRef Enabled As %Boolean, ByRef DisplayName As %String) As %Status
{
	#dim tModule As %ZPM.PackageManager.Developer.Module
	Set tSC = $$$OK
	Try {
		Set tExtension = $Piece(InternalName,".",*)
		Set tModuleEditable = 0
		Set tExplicitlyListed = 0
		
		Set tModule = ..GetModuleForInternalName(InternalName,.tIsModule,.tInModule,.tExplicitlyListed)		

		Set $ListBuild(Enabled,DisplayName) = $Case(MenuName,
			"%PackageMain":$ListBuild(1,$$$Text("Package Manager")),
			"%PackageContext":$ListBuild(1,$$$Text("Package Manager")),
			"%PackageMain,%OpenModule":$ListBuild(tInModule,$Select(tInModule:$$$FormatText($$$Text("Open Module '%1'"),tModule.Name),1:$$$Text("Open Module..."))),
			"%PackageContext,%OpenModule":$ListBuild(tInModule,$Select(tInModule:$$$FormatText($$$Text("Open Module '%1'"),tModule.Name),1:$$$Text("Open Module..."))),
			:$ListBuild(1,MenuName))
	} Catch e {
		Set tSC = e.AsStatus()
		
		// Log exceptions that occur, as they're otherwise silent.
		Do e.Log()
	}
	Quit tSC
}

Method UserAction(Type As %Integer, Name As %String, InternalName As %String, SelectedText As %String, ByRef Action As %String = {..#ActionDoNothing}, ByRef Target As %String = "", ByRef Msg As %String = "", ByRef Reload As %Boolean = 0) As %Status
{
	If (Type = ..#OtherEditorActionType) Quit $$$OK
	
	Set tSC = $$$OK
	Try {
		Set tEspNamespace = $ZConvert($Namespace,"O","URL")
		Set tEspInternalName = $ZConvert(InternalName,"O","URL")
		Set tExt = $ZCVT($Piece(InternalName,".",*),"U")
		Set tModule = ..GetModuleForInternalName(InternalName,.tIsModule,.tInModule)
		Set tPage = ""
		If (Name="%PackageMain,%OpenModule") || (Name="%PackageContext,%OpenModule") {
			Set Action = ..#ActionOpenDocuments
			Set Target = tModule.Name_".ZPM"
		}
	} Catch e {
		Set tSC = e.AsStatus()
	}
	Quit tSC
}

Method AfterUserAction(Type As %Integer, Name As %String, InternalName As %String, Answer As %Integer, Msg As %String = "", ByRef Reload As %Boolean = 0) As %Status
{
	$$$ZPMExtensionOutputGet(tOutput)
	For tLine=1:1:$Get(tOutput) {
		Write tOutput(tLine),!
	}
	$$$ZPMExtensionOutputClear
	Quit $$$OK
}

/// Return information about this entity.
Method GetStatus(InternalName As %String, ByRef IsInSourceControl As %Boolean, ByRef Editable As %Boolean, ByRef IsCheckedOut As %Boolean, ByRef UserCheckedOut As %String) As %Status
{
	// This isn't a source control extension - don't do anything unusual with those flags.
	Set IsCheckedOut=0,UserCheckedOut="",IsInSourceControl=0
	
	// However, this extension may flag certain items as non-editable - particularly, if they are part of a locked module.
	// If an item is not part of any module, then it is editable by default.
	Set tSC = ##class(%ZPM.PackageManager.Developer.ResourceReference).GetStatus(InternalName,,.Editable,,.tMessage)
	
	// Possibly display a warning message (once per session/document unless the message changes)
	// If ..StudioVersion is empty, this instance of %SourceControl was created programatically outside of
	// Studio/Atelier, so no output should be shown.
	If (InternalName '= "") && (..StudioVersion '= "") { // Prevent <SUBSCRIPT>, just in case.
		If $Get(..SnapshotMessageWarned(InternalName)) '= tMessage {
			Set ..SnapshotMessageWarned(InternalName) = tMessage
			If (tMessage '= "") {
				Write !,tMessage
			}
		}
	}
	Quit tSC
}

ClassMethod CheckEditable(pInternalName As %String) As %Boolean [ Private ]
{
	New %SourceControl
	$$$ThrowOnError(##class(%Studio.SourceControl.Interface).SourceControlCreate())
	$$$ThrowOnError(##class(%Studio.SourceControl.Interface).GetStatus(pInternalName,,.tEditable))
	Quit tEditable
}

}
